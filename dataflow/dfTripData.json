{
	"name": "dfTripData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "TripDataCsv",
						"type": "DatasetReference"
					},
					"name": "source1tripdatacsv"
				},
				{
					"dataset": {
						"referenceName": "TripDataTable",
						"type": "DatasetReference"
					},
					"name": "source2tripdatatable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "tripAggregatecsv",
						"type": "DatasetReference"
					},
					"name": "sinkAggregatedTaxiData"
				}
			],
			"transformations": [
				{
					"name": "join1Trip"
				},
				{
					"name": "aggregatebyPaymentType"
				}
			],
			"scriptLines": [
				"source(output(",
				"          medallion as string,",
				"          hack_license as string,",
				"          vendor_id as string,",
				"          pickup_datetime as timestamp,",
				"          payment_type as string,",
				"          fare_amount as double,",
				"          surcharge as boolean,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          total_amount as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1tripdatacsv",
				"source(output(",
				"          medallion as string,",
				"          hack_license as string,",
				"          vendor_id as string,",
				"          rate_code as string,",
				"          store_and_fwd_flag as string,",
				"          pickup_datetime as string,",
				"          dropoff_datetime as string,",
				"          passenger_count as string,",
				"          trip_time_in_secs as string,",
				"          trip_distance as string,",
				"          pickup_longitude as string,",
				"          pickup_latitude as string,",
				"          dropoff_longitude as string,",
				"          dropoff_latitude as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2tripdatatable",
				"source1tripdatacsv, source2tripdatatable join(source1tripdatacsv@medallion == source2tripdatatable@medallion",
				"     && source1tripdatacsv@hack_license == source2tripdatatable@hack_license",
				"     && source1tripdatacsv@vendor_id == source2tripdatatable@vendor_id",
				"     && source1tripdatacsv@pickup_datetime == toTimestamp(source2tripdatatable@pickup_datetime),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1Trip",
				"join1Trip aggregate(groupBy(payment_type = source2tripdatatable@payment_type),",
				"     {average fare} = avg(toInteger(source2tripdatatable@total_amount)),",
				"          {total trip distance} = sum(toInteger(trip_distance))) ~> aggregatebyPaymentType",
				"aggregatebyPaymentType sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkAggregatedTaxiData"
			]
		}
	}
}